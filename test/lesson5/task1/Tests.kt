package lesson5.task1

import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

class Tests {
    @Test
    @Tag("Example")
    fun timeStrToSeconds() {
        assertEquals(36000, timeStrToSeconds("10:00:00"))
        assertEquals(41685, timeStrToSeconds("11:34:45"))
        assertEquals(86399, timeStrToSeconds("23:59:59"))
    }

    @Test
    @Tag("Example")
    fun twoDigitStr() {
        assertEquals("00", twoDigitStr(0))
        assertEquals("09", twoDigitStr(9))
        assertEquals("10", twoDigitStr(10))
        assertEquals("99", twoDigitStr(99))
    }

    @Test
    @Tag("Example")
    fun timeSecondsToStr() {
        assertEquals("10:00:00", timeSecondsToStr(36000))
        assertEquals("11:34:45", timeSecondsToStr(41685))
        assertEquals("23:59:59", timeSecondsToStr(86399))
    }

    @Test
    @Tag("Normal")
    fun dateStrToDigit() {
        assertEquals("15.07.2016", dateStrToDigit("15 июля 2016"))
        assertEquals("", dateStrToDigit("3 мартобря 1918"))
        assertEquals("18.11.2018", dateStrToDigit("18 ноября 2018"))
        assertEquals("", dateStrToDigit("23"))
        assertEquals("03.04.2011", dateStrToDigit("3 апреля 2011"))
        assertEquals("03.04.1", dateStrToDigit("3 апреля 1"))
    }

    @Test
    @Tag("Normal")
    fun dateDigitToStr() {
        assertEquals("15 июля 2016", dateDigitToStr("15.07.2016"))
        assertEquals("", dateDigitToStr("01.02.20.19"))
        assertEquals("", dateDigitToStr("28.00.2000"))
        assertEquals("3 апреля 2011", dateDigitToStr("03.04.2011"))
        assertEquals("", dateDigitToStr("ab.cd.ef"))
        assertEquals("", dateDigitToStr("02.-1.33"))
    }

    @Test
    @Tag("Normal")
    fun flattenPhoneNumber() {
        assertEquals("+79211234567", flattenPhoneNumber("+7 (921) 123-45-67"))
        assertEquals("123456798", flattenPhoneNumber("12 --  34- 5 -- 67 -98"))
        assertEquals("", flattenPhoneNumber("ab-123"))
        assertEquals("+12345", flattenPhoneNumber("+12 (3) 4-5"))
        assertEquals("", flattenPhoneNumber("134_+874"))
        assertEquals("", flattenPhoneNumber("+"))
    }

    @Test
    @Tag("Normal")
    fun bestLongJump() {
        assertEquals(717, bestLongJump("706 % - 717 - 703"))
        assertEquals(-1, bestLongJump("% - - % -"))
        assertEquals(754, bestLongJump("700 717 707 % 754"))
        assertEquals(473243020, bestLongJump("-   % 473243020  0  -"))

    }

    @Test
    @Tag("Hard")
    fun bestHighJump() {
        assertEquals(226, bestHighJump("226 +"))
        assertEquals(-1, bestHighJump("???"))
        assertEquals(230, bestHighJump("220 + 224 %+ 228 %- 230 + 232 %%- 234 %"))
        assertEquals(998403412, bestHighJump("147483648 %+ 147483647 %+ 0 %- 764951569 %%- 687987937 %+ 1 %%- 238743318 %%- 0 %%+ 803809663 %- 0 %- 147483647 + 1 %%- 1 %- 952493922 %+ 0 %+ 141163138 %+ 0 %%+ 147483648 %+ 516682448 %+ 147483647 %+ 147483648 %%- 0 %+ 147483647 %+ 0 %%- 147483648 %- 147483648 + 760569461 %%- 147483647 %+ 1 %%+ 0 %+ 147483648 + 147483647 + 1 %- 66816503 %%+ 147483647 + 0 %%- 369417433 %- 147483648 %+ 290264075 %%- 518473590 %+ 0 %- 147483648 %%- 437901792 %+ 147483648 %+ 827901372 + 1 + 147483648 %%- 1 %+ 576201592 + 51921996 %%+ 147483647 %+ 693338879 %%- 147483647 %- 147483648 %- 72447526 %- 372616416 %+ 17625478 %- 147483647 %%+ 408222191 %+ 2083053 %+ 41884599 %- 147483647 %%- 147483647 %+ 147483647 %%- 0 %%- 813557988 + 0 %%+ 0 %- 168341880 + 147483647 %+ 0 + 147483647 + 720366166 + 147483647 %- 147483647 %%- 787426389 %- 127748747 %- 771744185 %+ 317992044 + 147483648 %%+ 0 %- 487785020 + 405714159 + 399086711 %%- 147483648 + 147483648 %%- 67958955 %+ 147483647 %- 218126973 %- 147483648 %%- 147483647 %+ 1 + 110946809 %%- 265879584 + 1 + 0 %%- 147483647 + 147483647 %%- 147483647 + 147483647 %+ 1 %%- 91521368 %%- 601494917 %- 147483647 %+ 0 %+ 1 %- 1 %%- 500214829 %- 377337069 + 68019827 %- 147483647 %%+ 147483648 %- 354899860 %%- 147483648 + 147483647 %%- 147483648 %+ 147483647 %- 776940429 + 147483647 + 0 %%- 596424611 %+ 147483647 %- 1 %%- 147483647 %+ 1 %+ 147483648 %+ 311864193 %- 1 %%- 147483647 %- 147483647 %- 124132372 %+ 770929906 %- 147483648 %- 0 %+ 166541256 %+ 1 %+ 574611577 + 0 %- 147483648 %- 147483648 %- 410278230 %%- 147483647 %+ 0 %%- 147483647 %%+ 697059857 %- 281171453 %+ 1 %- 0 + 667415608 %- 147483648 %%- 147483647 %- 147483648 %%- 0 %%- 719153038 + 147483647 %- 1 %+ 0 %%- 147483647 %%- 675145519 + 0 + 1 %+ 1 %%- 616892484 %%- 147483647 %+ 147483648 %%- 4407532 %- 147483647 %%- 810729020 %- 147483647 + 719590018 %- 0 %%+ 147483647 %- 147483648 %%+ 1 %- 1 %- 1 + 147483648 %+ 768050332 %+ 15094808 %- 20649073 %+ 1 %%- 0 + 773901838 %- 1 + 0 %%+ 147483648 + 147483647 %- 0 %- 218195249 %- 147483647 %+ 196839804 %%- 716164887 %%- 147483648 %+ 356926782 %+ 1 + 253007347 %+ 0 %+ 1 %%- 147483647 %+ 87134790 %- 0 %+ 279190419 + 900428631 %%- 0 %- 1 + 233099238 %+ 253225609 %%+ 224569149 + 47408273 %+ 1 + 25276587 %- 609224326 %%- 147483648 %%- 1 %- 0 %%- 50058911 %- 1 %- 550156160 %- 322089053 + 33497683 %%+ 0 %+ 117379427 + 295671972 %+ 812420950 %%- 994780367 %%- 147483647 %+ 0 + 1 %- 147483648 + 24590210 + 147483647 %+ 286894571 %%- 154424244 %%+ 0 %+ 147483647 %+ 1 %%- 70907545 %+ 794000597 %+ 0 + 0 %%- 147483647 %+ 793184436 %%- 156888990 %+ 0 %%- 147483648 %%- 147483647 %- 29172854 %+ 433900320 %+ 617900249 %%- 0 %- 810417622 + 1 %- 147483647 + 324519327 %%- 245889904 %- 147483647 %- 147483648 %%- 139320868 %%+ 147483648 + 0 %- 922542838 %- 147483647 %+ 0 + 336684497 %+ 126154629 %%+ 147483648 %%- 147483647 %- 166984235 + 357033651 %+ 147483647 %+ 491326522 + 932423639 %%- 48800551 %%+ 147483647 %- 0 %%+ 319634531 %%+ 147483647 %+ 1 %- 147483648 + 147483647 %+ 910268221 + 0 %- 1 %+ 0 %%+ 0 + 147483648 %- 0 %- 0 %- 1 %%- 0 %- 109185473 %%- 147483647 %+ 0 %%- 1 %- 147483647 %%- 147483648 %%- 817766948 %+ 672364081 %%- 474248341 + 1 %+ 370663889 %%- 428155919 %%- 147483648 + 519943228 %%- 147483648 %%- 308368019 %- 147483648 %%- 920010183 %%- 250357064 %%- 958754494 %+ 598766708 %- 431765934 %- 0 %+ 1 + 783149832 + 176634774 %+ 1 + 617933461 %- 147483648 + 0 %- 1 %+ 77688184 %- 453655129 %%- 1 + 147483648 %+ 0 %%- 461108158 + 147483648 + 539985782 + 147483648 + 655923097 %+ 1 %%- 103622461 %+ 468744738 + 0 %%- 327348249 %%- 1 %- 147483648 + 1 %%- 1 %+ 758541649 %%+ 127198943 %+ 689659547 %+ 0 + 169510321 %%- 245052916 + 391955215 %%- 0 + 0 %+ 312897788 %%- 147483648 %%- 147483647 + 994043724 %%- 0 %+ 147483648 %%- 221885957 %- 785170307 %+ 492643809 %+ 0 %- 0 %- 0 %%+ 331823933 + 775215219 %+ 147483648 %%+ 1 %%+ 147483647 %+ 859784244 + 147483648 %+ 227772665 %+ 825837585 %+ 147483648 %%+ 147483648 + 802836177 %- 763651374 + 1 + 147483648 %- 147483647 %%- 264203449 %- 471446152 %%+ 0 + 730555315 %+ 0 %- 147483647 + 0 %- 383353882 %+ 147483647 + 147483647 %+ 147483647 + 298963275 %%- 0 %+ 147483647 + 1 %- 932378766 %+ 147483647 + 147483648 %%- 147483648 + 147483648 + 147483647 + 147483647 + 1 %- 763872675 + 147483648 %%- 147483647 %%- 0 %%- 333076535 %- 147483647 %%+ 147483648 %%- 0 %%+ 1 %- 535796857 %%- 147483648 + 865592726 + 0 %+ 665015893 %+ 0 %+ 370938005 %- 298664635 + 147483647 %+ 0 %%- 1 %%- 147483648 %%+ 67748269 + 416999534 %+ 147483648 %- 0 %- 774975653 %%- 260549588 %%+ 452732134 %%- 147483647 %%+ 487242711 + 147483647 %%+ 147483648 %%- 587806164 %+ 147483647 + 856822792 + 596405113 %%+ 1 %- 147483648 %+ 1 %+ 995351910 %%+ 90180624 %%- 275184516 %- 147483648 %%- 90556853 + 455053523 %- 1 %%- 345843689 %+ 0 %+ 0 %+ 147483648 %%- 451447354 + 133780195 %+ 0 + 259449794 %- 974686577 %%- 889128522 %+ 0 %- 147483647 + 0 %%- 0 %%- 0 %+ 147483648 %+ 0 %- 1 %%- 0 %- 575378189 %- 816332460 %%- 147483647 %%- 147483647 %+ 1 %%+ 782568206 %%- 926232618 %+ 657524716 %%- 712060718 %+ 0 %%- 289792127 + 147483648 %+ 331882141 %+ 147483648 %%- 147483648 + 147483648 + 0 %%+ 0 %- 147483647 %%- 1 %- 147483647 %+ 147483647 %%+ 1 + 1 %+ 147483647 %%+ 147483647 %- 173669156 %%- 147483647 + 147483648 %- 147483648 %%+ 0 %%+ 861264278 %- 0 + 147483648 %- 941526978 %+ 535992854 %- 392869858 + 147483647 + 147483647 %%- 0 %%+ 167993410 %+ 582305907 %+ 851382255 + 147483647 %- 605007137 %%- 748098287 %- 541291711 %%- 459953716 %+ 357698635 %%- 147483647 + 147483648 + 430941676 %- 34229106 %%- 1 %- 100880789 %%- 147483648 %+ 124375446 %%- 147483648 %%- 1 %%+ 147483648 %%- 147483647 %%- 841061117 %+ 459914366 %- 147483648 %+ 147483647 %%- 248150778 %- 275395969 %%- 147483647 %- 783990282 + 147483648 %%+ 693620605 %%- 461942176 %+ 631858190 + 147483648 %+ 147483648 %- 1 %- 147483648 %%- 147483648 %+ 147483647 %+ 147483647 %- 147483647 %%- 147483648 %%+ 127758626 + 710721454 + 147483647 %%- 1 %%- 1 %- 719391349 + 930346235 %+ 992901928 + 147483648 + 147483647 %%- 472546289 %- 0 %%- 147483648 %%- 30088766 %+ 914396220 %+ 147483648 %+ 0 %%- 122429580 + 854026139 %+ 0 %+ 1 %- 561435532 %+ 286425248 + 147483648 %- 580779196 %%- 147483647 %%+ 86682740 %%+ 1 %%- 699910922 %+ 3299543 %%+ 147483647 %%- 505016433 %+ 147483648 %- 1 %%- 387096118 %%+ 403370667 + 657489343 %%- 793593810 %- 77712122 + 0 %+ 211773205 %- 147483648 %+ 100244603 %+ 141639255 %- 147483647 %- 147483648 + 147483647 %- 1 + 802638444 %+ 0 %- 1 %%- 1 %%- 147483648 %- 798209100 %+ 0 %- 147483648 %- 1 %%+ 1 + 43836909 %- 0 %- 147483647 %- 190978294 %%- 977524131 %- 0 %- 147483648 %%+ 0 %%- 147483647 %- 147483647 %%+ 147483648 %+ 147483647 %+ 998403412 + 625855648 + 147483647 %%- 147483648 + 147483647 %+ 9787546 + 147483648 + 147483647 %%- 905282399 %+ 7492379 %%- 1 + 1 %%+ 147483648 + 1 %%- 0 + 131206607 %- 0 %- 147483648 + 147483648 %- 37917198 %+ 615670962 %+ 147483647 %- 528781246 %%- 147483648 + 1 %+ 490127696 %%+ 0 + 721220504 %- 0 %+ 147483647 %+ 449990946 + 147483648 %%- 0 + 147483648 %- 1 %%+ 147483648 %+ 147483648 + 36619610 %+ 0 + 730074407 %%- 1 %- 147483648 + 1 %- 0 + 147483647 + 147483647 + 147483647 %%- 686352217 %- 147483648 %%- 0 + 917885242 + 1 %+ 147483648 + 958426316 %+"))
    }
    @Test
    @Tag("Hard")
    fun plusMinus() {
        assertEquals(0, plusMinus("0"))
        assertEquals(4, plusMinus("2 + 2"))
        assertEquals(6, plusMinus("2 + 31 - 40 + 13"))
        assertEquals(-1, plusMinus("0 - 1"))
    }

    @Test
    @Tag("Hard")
    fun firstDuplicateIndex() {
        assertEquals(-1, firstDuplicateIndex("Привет"))
        assertEquals(9, firstDuplicateIndex("Он пошёл в в школу"))
        assertEquals(40, firstDuplicateIndex("Яблоко упало на ветку с ветки оно упало на на землю"))
        assertEquals(9, firstDuplicateIndex("Мы пошли прямо Прямо располагался магазин"))
        assertEquals(0, firstDuplicateIndex("Самолёт самолёт"))
    }

    @Test
    @Tag("Hard")
    fun mostExpensive() {
        assertEquals("", mostExpensive(""))
        assertEquals("Курица", mostExpensive("Хлеб 39.9; Молоко 62.5; Курица 184.0; Конфеты 89.9"))
        assertEquals("Вино", mostExpensive("Вино 255.0"))
        assertEquals("молоко", mostExpensive("Хлеб 39.9; Молоко 62.5; Курица 184.0; Конфеты 89.9; молоко 1111.0;"))
    }

    @Test
    @Tag("Hard")
    fun fromRoman() {
        assertEquals(1, fromRoman("I"))
        assertEquals(3000, fromRoman("MMM"))
        assertEquals(1978, fromRoman("MCMLXXVIII"))
        assertEquals(694, fromRoman("DCXCIV"))
        assertEquals(49, fromRoman("XLIX"))
        assertEquals(-1, fromRoman("Z"))
        assertEquals(500, fromRoman("D"))
    }

    @Test
    @Tag("Impossible")
    fun computeDeviceCells() {
        assertEquals(listOf(0, 0, 0, 0, 0, 1, 1, 1, 1, 1), computeDeviceCells(10, "+>+>+>+>+", 10000))
        assertEquals(listOf(-1, -1, -1, -1, -1, 0, 0, 0, 0, 0), computeDeviceCells(10, "<-<-<-<-<-", 10000))
        assertEquals(listOf(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), computeDeviceCells(10, "- <<<<< +[>+]", 10000))
        assertEquals(listOf(0, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0),
                computeDeviceCells(11, "<<<<< + >>>>>>>>>> --[<-] >+[>+] >++[--< <[<] >+[>+] >++]", 10000))

        assertEquals(listOf(0, 0, 0, 0, 0, 1, 1, 0, 0, 0), computeDeviceCells(10, "+>+>+>+>+", 4))
        assertEquals(listOf(0, 0, -1, -1, -1, 0, 0, 0, 0, 0), computeDeviceCells(10, "<-<-<-<-<-", 6))
        assertEquals(listOf(1, 1, 1, 0, 0, -1, 0, 0, 0, 0), computeDeviceCells(10, "- <<<<< +[>+]", 17))
        assertEquals(listOf(0, 6, 5, 4, 3, 2, 1, 0, -1, -1, -2),
                computeDeviceCells(11, "<<<<< + >>>>>>>>>> --[<-] >+[>+] >++[--< <[<] >+[>+] >++]", 256))
    }

    @Test
    fun colorPeople() {
        assertEquals(listOf("2 1 -> синий, красный, зеленый", "ААА Еее: апельсин, мандарин, яблоко"), colorPeople(listOf("Еее ААА БББ: апельсин, мандарин, яблоко", "Йцу Фыв Ячс: кен, апр, мит, олд, гшщ", "1 2 3: синий, красный, зеленый", "Йцу Фыв Ячс: кен, апр, мит, олд, гшщ")))
    }
}